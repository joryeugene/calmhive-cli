#!/usr/bin/env node
/**
 * Calmhive Voice Command
 * Voice interface to Claude using the real working voice system
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// Get all arguments
const args = process.argv.slice(2);

// Check for help
if (args.includes('--help') || args.includes('-h')) {
  console.log(`
üêù Calmhive 'voice' - Voice interface to Claude

Usage: calmhive voice [options]

Options:
  --test       Test voice dependencies
  --id <id>    Resume conversation with ID
  --input <text>  Start with initial text
  --silence <s>   Silence duration (default: 5.0)
  --debug      Enable debug mode
  --help       Show this help

This command provides voice input to Claude using RealtimeSTT and OpenAI TTS.
Say trigger words like "calmhive", "friend", "assistant", "code", or "help".

Example: "Hey calmhive, create a hello world script"

Requirements:
- OpenAI API key (for TTS)
- Anthropic API key (for Claude Code)
- Python dependencies (automatically managed with uv)
`);
  process.exit(0);
}

// Test mode
if (args.includes('--test')) {
  console.log('üé§ Testing voice dependencies...');
  
  // Check for uv
  const checkUv = spawn('which', ['uv'], { stdio: 'pipe' });
  
  checkUv.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ uv package manager found');
      
      // Test the voice script
      const voiceScript = path.join(__dirname, '../lib/voice/consolidated/voice_to_claude_code.py');
      const testVoice = spawn('uv', ['run', voiceScript, '--help'], { stdio: 'pipe' });
      
      let output = '';
      testVoice.stdout.on('data', (data) => {
        output += data.toString();
      });
      
      testVoice.on('close', (testCode) => {
        if (testCode === 0 && output.includes('Voice-enabled Claude Code assistant')) {
          console.log('‚úÖ Voice system ready!');
          console.log('Voice interface is fully available.');
        } else {
          console.log('‚ùå Voice script not working');
          console.log('Dependencies may need installation.');
        }
      });
    } else {
      console.log('‚ùå uv package manager not found');
      console.log('Install uv: curl -LsSf https://astral.sh/uv/install.sh | sh');
      console.log('Voice will not be available without uv.');
    }
  });
  
  return;
}

// Check if voice system exists
const voiceScript = path.join(__dirname, '../lib/voice/consolidated/voice_to_claude_code.py');

if (!fs.existsSync(voiceScript)) {
  console.log('‚ùå Voice system not found');
  console.log('Voice implementation missing.');
  process.exit(1);
}

// Launch the real voice interface
console.log('üé§ Starting Calmhive voice interface...');
console.log('Press Ctrl+C to exit');

// Build arguments for the voice script
const voiceArgs = ['run', voiceScript];

// Pass through relevant arguments
const argMap = {
  '--id': '--id',
  '--input': '--input', 
  '--silence': '--silence',
  '--debug': '--debug'
};

for (let i = 0; i < args.length; i++) {
  const arg = args[i];
  if (argMap[arg]) {
    voiceArgs.push(arg);
    if (arg !== '--debug' && i + 1 < args.length) {
      voiceArgs.push(args[i + 1]);
      i++; // Skip next arg since we consumed it
    }
  }
}

const voice = spawn('uv', voiceArgs, {
  stdio: 'inherit'
});

voice.on('error', (err) => {
  console.error('Failed to start voice interface:', err);
  console.log('Make sure uv is installed: curl -LsSf https://astral.sh/uv/install.sh | sh');
  process.exit(1);
});

voice.on('exit', (exitCode) => {
  process.exit(exitCode || 0);
});