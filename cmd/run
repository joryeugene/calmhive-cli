#!/usr/bin/env node
/**
 * Calmhive Run Command
 * TRUE headless automation with smart MCP prompting
 */

const { spawn } = require('child_process');
const toolManager = require('../lib/tool-manager');
const ruleInjector = require('../lib/rule-injector');

// Get all arguments
const args = process.argv.slice(2);

// Check for help
if (args.includes('--help') || args.includes('-h')) {
  console.log(`
üêù Calmhive 'run' - Headless Automation

Usage: calmhive run [task description]

This command executes tasks in true headless mode with smart prompting
that leverages MCP tools for enhanced capabilities.

Examples:
  calmhive run "analyze the codebase and create documentation"
  calmhive run "fix the authentication bug and test it"
  calmhive run "refactor the API endpoints for better performance"

Features:
  ‚úì TRUE headless execution (non-interactive)
  ‚úì Smart prompting with MCP tool integration
  ‚úì Access to 85+ safe tools across 10+ MCP servers
  ‚úì Sequential thinking for complex tasks
  ‚úì Automatic verification and testing
  ‚úì Perfect for automation, scripts, CI/CD
`);
  process.exit(0);
}

// Get the task description
const task = args.join(' ');

if (!task) {
  console.error('‚ùå Please provide a task description');
  console.log('Usage: calmhive run "your task here"');
  process.exit(1);
}

// Inject CLAUDE.md rules into the task first
const enhancedTask = ruleInjector.injectRules(task, { commandType: 'run' });

// Build execution prompt with enhanced task (rules already included)
const fullPrompt = `CALMHIVE RUN - HEADLESS AUTOMATION

TASK: ${enhancedTask}

BEGIN EXECUTION:`;

// Create temp file for robust prompt handling
const os = require('os');
const fs = require('fs');
const tempFile = `${os.tmpdir()}/calmhive-run-${Date.now()}.txt`;

try {
  fs.writeFileSync(tempFile, fullPrompt);
  
  // Build claude args for TRUE headless execution
  const allTools = toolManager.getAllToolsArray();
  const claudeArgs = ['-p', '--allowedTools', ...allTools]; // Removed -c to avoid continuation issues
  
  // Use temp file approach for reliable prompt handling
  const claude = spawn('bash', ['-c', `cat "${tempFile}" | claude ${claudeArgs.join(' ')}`], {
    stdio: ['ignore', 'pipe', 'pipe']
  });
  
  // Cleanup temp file after a delay
  setTimeout(() => {
    try { fs.unlinkSync(tempFile); } catch (e) { /* ignore */ }
  }, 5000);

  // Pipe output to stdout/stderr
  claude.stdout.pipe(process.stdout);
  claude.stderr.pipe(process.stderr);

  claude.on('error', (err) => {
    console.error('Failed to start claude:', err);
    process.exit(1);
  });

  claude.on('exit', (code) => {
    process.exit(code || 0);
  });

} catch (error) {
  console.error('‚ùå Failed to create temp file or start claude:', error.message);
  process.exit(1);
}