#!/usr/bin/env node
/**
 * Calmhive Work Command
 * Intelligent task execution with automatic model selection and AFk orchestration
 * Simplified version - wraps AFk with smart defaults
 */

// Exit codes
const EXIT_CODES = {
  SUCCESS: 0,
  INVALID_ARGS: 1,
  ANALYSIS_FAILED: 2,
  AFK_FAILED: 3,
  CONTEXT_ERROR: 4
};

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs-extra');
const pathManager = require('../lib/path-manager');
const WorkComplexityAnalyzer = require('../lib/work-complexity-analyzer');

const args = process.argv.slice(2);

// Show help
if (args.length === 0 || args.includes('--help') || args.includes('-h')) {
  console.log(`
üêù Calmhive Work Command v${pathManager.getVersion()}
Intelligent task execution with automatic optimization

Usage: calmhive work "<task description>" [options]

Examples:
  calmhive work "fix the login bug"                    # Simple task
  calmhive work "implement user profiles" --iterations 5  # Override iterations
  calmhive work "refactor authentication" --model opus    # Force complex model
  calmhive work "add dark mode toggle" --dry-run         # Preview command

Options:
  --iterations <n>    Number of AFk iterations (default: auto-detect)
                      Simple tasks: 1-3, Moderate: 4-6, Complex: 8-15
  --model <name>      Force model: sonnet, opus (default: auto)
                      sonnet: Default for most tasks
                      opus: Complex architecture/migration tasks
  --context <file>    Provide additional context from a file
  --dry-run          Preview what would be executed without running
  --help, -h         Show this help message

Features:
  üß† Natural language understanding - Describe tasks conversationally
  üéØ Automatic complexity detection - AI analyzes task requirements
  üöÄ Smart model selection - Chooses optimal Claude model
  üìà Optimal iteration calculation - Right amount of work cycles
  üîÑ Seamless AFk integration - Handles background execution

How it works:
  1. Analyzes your task description using Claude
  2. Determines complexity (simple/moderate/complex)
  3. Selects appropriate model and iteration count
  4. Executes via AFk with optimal settings

Exit codes:
  0 - Success
  1 - Invalid arguments
  2 - Analysis failed
  3 - AFk execution failed
  4 - Context file error
  `);
  process.exit(EXIT_CODES.SUCCESS);
}

// Parse task and options
const taskDescription = args[0];

// Validate task description
if (!taskDescription || taskDescription.trim().length === 0) {
  console.error('‚ùå Task description is required');
  console.log('Usage: calmhive work "<task description>" [options]');
  console.log('Example: calmhive work "fix the login bug"');
  process.exit(EXIT_CODES.INVALID_ARGS);
}

// Validate task description length
if (taskDescription.length > 10000) {
  console.error('‚ùå Task description is too long (max 10,000 characters)');
  console.log('Please provide a more concise task description');
  process.exit(EXIT_CODES.INVALID_ARGS);
}

let options = {
  iterations: null,
  model: null,
  context: null,
  dryRun: false
};

// Parse command line options
for (let i = 1; i < args.length; i++) {
  const arg = args[i];
  const value = args[i + 1];
  
  switch (arg) {
    case '--iterations':
      options.iterations = parseInt(value);
      if (isNaN(options.iterations) || options.iterations < 1) {
        console.error(`‚ùå Invalid iterations value: "${value}"`);
        console.error('   Iterations must be a positive number (e.g., --iterations 5)');
        process.exit(EXIT_CODES.INVALID_ARGS);
      }
      i++;
      break;
    case '--model':
      if (!['sonnet', 'opus'].includes(value)) {
        console.error(`‚ùå Invalid model: "${value}"`);
        console.error('   Available models: sonnet (default), opus (complex tasks)');
        process.exit(EXIT_CODES.INVALID_ARGS);
      }
      options.model = value;
      i++;
      break;
    case '--context':
      options.context = value;
      i++;
      break;
    case '--dry-run':
      options.dryRun = true;
      break;
    default:
      console.error(`‚ùå Unknown option: ${arg}`);
      process.exit(EXIT_CODES.INVALID_ARGS);
  }
}

// Initialize complexity analyzer
const complexityAnalyzer = new WorkComplexityAnalyzer();

// Analyze task complexity using Claude LLM judge
async function analyzeTaskComplexity(task) {
  try {
    const analysis = await complexityAnalyzer.analyzeComplexity(task);
    
    return {
      complexity: analysis.complexity,
      suggestedIterations: analysis.iterations,
      suggestedModel: analysis.model,
      confidence: analysis.confidence,
      reasoning: analysis.reasoning,
      source: analysis.source
    };
  } catch (error) {
    console.warn(`‚ö†Ô∏è  Complexity analysis failed: ${error.message}`);
    console.log('üîÑ Using fallback analysis...');
    
    // Simple fallback if LLM analysis completely fails
    const wordCount = task.split(/\s+/).length;
    if (wordCount < 6) {
      return { complexity: 'simple', suggestedIterations: 2, suggestedModel: 'sonnet', confidence: 0.5, reasoning: 'Simple fallback based on word count', source: 'emergency_fallback' };
    } else if (wordCount > 15) {
      return { complexity: 'complex', suggestedIterations: 10, suggestedModel: 'opus', confidence: 0.5, reasoning: 'Complex fallback based on word count', source: 'emergency_fallback' };
    } else {
      return { complexity: 'moderate', suggestedIterations: 5, suggestedModel: 'sonnet', confidence: 0.5, reasoning: 'Moderate fallback based on word count', source: 'emergency_fallback' };
    }
  }
}

// Main execution
async function executeWork() {
  console.log('üöÄ Analyzing task...');
  
  const analysis = await analyzeTaskComplexity(taskDescription);
  
  // Use provided options or smart defaults
  const iterations = options.iterations || analysis.suggestedIterations;
  const model = options.model || analysis.suggestedModel;
  
  console.log(`üìä Task Analysis:
  - Complexity: ${analysis.complexity}
  - Model: ${model}
  - Iterations: ${iterations}
  - Confidence: ${(analysis.confidence * 100).toFixed(0)}%
  - Source: ${analysis.source}
  - Task: "${taskDescription}"`);
  
  if (analysis.reasoning) {
    console.log(`  - Reasoning: ${analysis.reasoning}`);
  }
  
  if (options.dryRun) {
    console.log('\nüîç Dry run mode - would execute:');
    // Escape quotes in task description for display
    const escapedTask = taskDescription.replace(/"/g, '\\"');
    let afkCommand = `calmhive afk "${escapedTask}" --iterations ${iterations}`;
    if (model !== 'sonnet') {
      afkCommand += ` --model ${model}`;
    }
    console.log(afkCommand);
    if (options.context) {
      console.log(`  with context from: ${options.context}`);
    }
    process.exit(EXIT_CODES.SUCCESS);
  }
  
  // Build AFk command
  const afkArgs = [taskDescription, '--iterations', iterations.toString()];
  
  // Add model selection if not default
  if (model !== 'sonnet') {
    afkArgs.push('--model', model);
  }
  
  // Add context if provided
  if (options.context) {
    // Read context file and append to task
    try {
      const contextContent = await fs.readFile(options.context, 'utf8');
      afkArgs[0] = `${taskDescription}\n\nContext:\n${contextContent}`;
    } catch (error) {
      console.error(`‚ö†Ô∏è Could not read context file: ${error.message}`);
    }
  }
  
  console.log('\nüéØ Starting intelligent task execution...\n');
  
  // Execute AFk
  const afkCmd = path.join(__dirname, 'afk');
  const afkProcess = spawn('node', [afkCmd, ...afkArgs], {
    stdio: 'inherit',
    cwd: process.cwd()
  });
  
  afkProcess.on('error', (error) => {
    console.error(`‚ùå Failed to execute AFk: ${error.message}`);
    process.exit(EXIT_CODES.AFK_FAILED);
  });
  
  afkProcess.on('exit', (code) => {
    if (code === 0) {
      console.log('\n‚úÖ Work completed successfully!');
    }
    process.exit(code || EXIT_CODES.SUCCESS);
  });
}

// Execute
executeWork().catch(error => {
  console.error('‚ùå Unexpected error:', error);
  process.exit(EXIT_CODES.ANALYSIS_FAILED);
});