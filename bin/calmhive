#!/usr/bin/env node
/**
 * Calmhive v14.2.9 - Main Entry Point
 * The intelligent Claude CLI wrapper
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const pathManager = require('../lib/path-manager');

/**
 * Get the current version of Calmhive from the path manager
 * @returns {string} The version string from package.json
 */
function getVersion() {
  return pathManager.getVersion();
}

// Available commands
const COMMANDS = {
  'afk': 'Run long tasks in background with automatic retries',
  'chat': 'Interactive chat with Claude',
  'config': 'Manage CLAUDE.md configuration files',
  'run': 'Execute one-shot tasks headlessly',
  'schedule': 'Natural language task scheduling with Claude Code',
  'template': 'Manage task templates for common workflows',
  'progress': 'View detailed progress for AFk sessions',
  'tui': 'Terminal UI for process management',
  'voice': 'Voice interface to Claude',
  'health': 'System health monitoring and diagnostics',
  'intercept': 'Control global rule injection settings',
  'setup': 'Configure Claude Code hooks and MCP integration',
  'update': 'Update calmhive and Claude Code to latest versions'
};

// Command aliases
const ALIASES = {
  'w': 'work',
  'a': 'afk',
  'c': 'chat',
  'r': 'run',
  's': 'schedule',
  'tmp': 'template',
  'p': 'progress',
  'i': 'intercept',
  't': 'tui',
  'v': 'voice',
  'h': 'health'
};

/**
 * Display the main help message showing all available commands and usage examples
 * Formats commands with their descriptions and aliases, shows practical examples
 */
function showHelp() {
  const version = getVersion();
  console.log(`
üêù Calmhive v${version} - Claude That Never Quits

Usage: calmhive <command> [options]

Commands:
`);
  
  Object.entries(COMMANDS).forEach(([cmd, desc]) => {
    if (!ALIASES[cmd]) { // Only show main commands, not aliases
      const aliases = Object.entries(ALIASES)
        .filter(([alias, target]) => target === cmd)
        .map(([alias]) => alias);
      const aliasStr = aliases.length > 0 ? ` (${aliases.join(', ')})` : '';
      console.log(`  ${cmd.padEnd(8)} ${desc}${aliasStr}`);
    }
  });
  
  console.log(`
Examples:
  calmhive chat "explain this code"
  calmhive run "add tests to utils.js"
  calmhive afk "migrate to TypeScript" --iterations 20
  calmhive schedule create "daily at 9am" "calmhive chat 'morning standup'"
  calmhive voice
  calmhive tui

For command-specific help:
  calmhive <command> --help
`);
}

/**
 * Main execution logic - Parse command line arguments and route to appropriate commands
 * Handles help, version, and update commands before delegating to specific command modules
 */
const args = process.argv.slice(2);

// Handle help flags
if (args.length === 0 || args[0] === '--help' || args[0] === '-h') {
  showHelp();
  process.exit(0);
}

// Handle version flag
if (args[0] === '--version' || args[0] === '-v') {
  console.log(getVersion());
  process.exit(0);
}

// Handle update command
if (args[0] === 'update') {
  const calmhiveOnly = args.includes('--calmhive-only');
  const claudeOnly = args.includes('--claude-only');
  
  if (args.includes('--help') || args.includes('-h')) {
    console.log('Usage: calmhive update [options]');
    console.log('');
    console.log('Update calmhive and Claude Code to the latest versions');
    console.log('');
    console.log('Options:');
    console.log('  --calmhive-only    Update only @calmhive/calmhive-cli');
    console.log('  --claude-only      Update only @anthropic-ai/claude-code');
    console.log('  -h, --help         Show this help message');
    console.log('');
    console.log('Examples:');
    console.log('  calmhive update                    # Update both packages');
    console.log('  calmhive update --calmhive-only    # Update only calmhive');
    console.log('  calmhive update --claude-only      # Update only Claude Code');
    process.exit(0);
  }
  
  const { spawn } = require('child_process');
  
  if (claudeOnly) {
    console.log('üîÑ Updating Claude Code to latest version...');
    console.log('üì¶ Updating @anthropic-ai/claude-code...');
    const updateClaude = spawn('npm', ['install', '-g', '@anthropic-ai/claude-code@latest'], {
      stdio: 'inherit'
    });
    
    updateClaude.on('exit', (code) => {
      if (code === 0) {
        console.log('‚úÖ Claude Code updated successfully!');
        console.log('üì¶ Run \'claude --version\' to see the new version');
      } else {
        console.error('‚ùå Claude Code update failed. Try running manually:');
        console.error('npm install -g @anthropic-ai/claude-code@latest');
      }
      process.exit(code || 0);
    });
    
    updateClaude.on('error', (err) => {
      console.error(`‚ùå Claude Code update failed: ${err.message}`);
      process.exit(1);
    });
    
    return;
  }
  
  if (calmhiveOnly) {
    console.log('üîÑ Updating calmhive to latest version...');
    console.log('üì¶ Updating @calmhive/calmhive-cli...');
    const updateCalmhive = spawn('npm', ['install', '-g', '@calmhive/calmhive-cli@latest'], {
      stdio: 'inherit'
    });
    
    updateCalmhive.on('exit', (code) => {
      if (code === 0) {
        console.log('‚úÖ Calmhive updated successfully!');
        console.log('üì¶ Run \'calmhive --version\' to see the new version');
      } else {
        console.error('‚ùå Calmhive update failed. Try running manually:');
        console.error('npm install -g @calmhive/calmhive-cli@latest');
      }
      process.exit(code || 0);
    });
    
    updateCalmhive.on('error', (err) => {
      console.error(`‚ùå Calmhive update failed: ${err.message}`);
      process.exit(1);
    });
    
    return;
  }
  
  // Default: Update both packages
  console.log('üîÑ Updating calmhive and Claude Code to latest versions...');
  
  // Update calmhive first
  console.log('üì¶ Updating @calmhive/calmhive-cli...');
  const updateCalmhive = spawn('npm', ['install', '-g', '@calmhive/calmhive-cli@latest'], {
    stdio: 'inherit'
  });
  
  updateCalmhive.on('exit', (code) => {
    if (code === 0) {
      console.log('‚úÖ Calmhive updated successfully!');
      
      // Now update Claude Code
      console.log('\nüì¶ Updating @anthropic-ai/claude-code...');
      const updateClaude = spawn('npm', ['install', '-g', '@anthropic-ai/claude-code@latest'], {
        stdio: 'inherit'
      });
      
      updateClaude.on('exit', (claudeCode) => {
        if (claudeCode === 0) {
          console.log('‚úÖ Claude Code updated successfully!');
          console.log('\nüéâ Both packages updated successfully!');
          console.log('üì¶ Run \'calmhive --version\' and \'claude --version\' to see the new versions');
        } else {
          console.log('‚ö†Ô∏è  Calmhive updated, but Claude Code update failed.');
          console.error('üí° Try updating Claude Code manually:');
          console.error('npm install -g @anthropic-ai/claude-code@latest');
        }
        process.exit(claudeCode || 0);
      });
      
      updateClaude.on('error', (err) => {
        console.log('‚ö†Ô∏è  Calmhive updated, but Claude Code update failed.');
        console.error(`‚ùå Claude Code update error: ${err.message}`);
        console.error('üí° Try updating manually: npm install -g @anthropic-ai/claude-code@latest');
        process.exit(1);
      });
      
    } else {
      console.error('‚ùå Calmhive update failed. Try running manually:');
      console.error('npm install -g @calmhive/calmhive-cli@latest');
      console.error('npm install -g @anthropic-ai/claude-code@latest');
      process.exit(code || 0);
    }
  });
  
  updateCalmhive.on('error', (err) => {
    console.error(`‚ùå Calmhive update failed: ${err.message}`);
    console.error('üí° Try updating manually:');
    console.error('npm install -g @calmhive/calmhive-cli@latest');
    console.error('npm install -g @anthropic-ai/claude-code@latest');
    process.exit(1);
  });
  
  return;
}

// Get command (resolve aliases)
let command = args[0];
if (ALIASES[command]) {
  command = ALIASES[command];
}

// Check if command exists
if (!pathManager.commandExists(command)) {
  console.error(`‚ùå Unknown command: ${command}`);
  console.log('Run "calmhive --help" for available commands');
  process.exit(1);
}

const commandPath = pathManager.getCommandPath(command);

// Execute command
const child = spawn('node', [commandPath, ...args.slice(1)], {
  stdio: 'inherit',
  env: { ...process.env }
});

child.on('error', (err) => {
  console.error(`‚ùå Failed to execute command: ${err.message}`);
  process.exit(1);
});

child.on('exit', (code) => {
  process.exit(code || 0);
});